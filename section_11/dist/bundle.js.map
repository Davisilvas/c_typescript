{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://project_1/./src/components/base-component.ts","webpack://project_1/./src/util/validation.ts","webpack://project_1/./src/decorators/autobind.ts","webpack://project_1/./src/models/project.ts","webpack://project_1/./src/state/project-state.ts","webpack://project_1/./src/components/project-input.ts","webpack://project_1/./src/components/project-item.ts","webpack://project_1/./src/components/project-list.ts","webpack://project_1/./src/app.ts"],"sourcesContent":["// Component Base Class\r\nexport abstract class Component <T extends HTMLElement, U extends HTMLElement> {\r\n    templateElement: HTMLTemplateElement;\r\n    hostElement: T;\r\n    element: U;\r\n\r\n    constructor(\r\n        templateId:string,\r\n        hostElementId: string,\r\n        insertAtStart: boolean,\r\n        newElementId?: string,\r\n    ){\r\n        this.templateElement = document.getElementById(\r\n            templateId\r\n        )! as HTMLTemplateElement;\r\n        this.hostElement = document.getElementById(hostElementId)! as T\r\n\r\n        const importedNode = document.importNode(this.templateElement.content, true)\r\n        this.element = importedNode.firstElementChild as U;\r\n        if (newElementId){\r\n            this.element.id = newElementId;\r\n        }\r\n\r\n        this.attach(insertAtStart)\r\n    }\r\n\r\n    private attach(insertAtBeginning: boolean){\r\n        this.hostElement.insertAdjacentElement(\r\n            insertAtBeginning ? 'afterbegin' : 'beforeend',\r\n            this.element\r\n        )\r\n    }\r\n\r\n    abstract configure(): void;\r\n    abstract renderContent(): void;\r\n}","// Validation\r\nexport interface Validatable {\r\n    value: string | number;\r\n    required?: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\nexport function validate(validatableInput: Validatable){\r\n    let isValid = true;\r\n\r\n    if(validatableInput.required){\r\n        isValid = isValid && validatableInput.value.toString().trim().length !== 0;\r\n    }\r\n\r\n    if (\r\n        validatableInput.minLength != null && \r\n        typeof validatableInput.value ===\"string\"\r\n    ){\r\n        isValid = isValid && validatableInput.value.length >= validatableInput.minLength\r\n    }\r\n\r\n    if (\r\n        validatableInput.maxLength != null && \r\n        typeof validatableInput.value ===\"string\"\r\n    ){\r\n        isValid = isValid && validatableInput.value.length <= validatableInput.maxLength\r\n    }\r\n\r\n    if(\r\n        validatableInput.min != null\r\n        && typeof validatableInput.value === 'number'\r\n    ){\r\n        isValid = isValid && validatableInput.value >= validatableInput.min\r\n    }\r\n\r\n    if(\r\n        validatableInput.max != null\r\n        && typeof validatableInput.value === 'number'\r\n    ){\r\n        isValid = isValid && validatableInput.value <= validatableInput.max\r\n    }\r\n\r\n    return isValid\r\n}","// Autobind decorator\r\nexport function Autobind(\r\n    _: any, \r\n    _2: string, \r\n    descriptor: PropertyDescriptor\r\n) {\r\n    const originalMethod = descriptor.value;\r\n    const adjDescriptor: PropertyDescriptor = {\r\n        configurable: true,\r\n        get(){\r\n            const boundFn = originalMethod.bind(this);\r\n            return boundFn;\r\n        }\r\n    };\r\n    return adjDescriptor;\r\n}","export enum ProjectStatus {\r\n    Active, \r\n    Finished\r\n}\r\n\r\nexport class Project {\r\n    constructor(\r\n            public id: string, \r\n            public title: string, \r\n            public description: string, \r\n            public people: number, \r\n            public status: ProjectStatus\r\n        ){\r\n    }\r\n}","// Imports\r\nimport { Project } from \"../models/project\";\r\nimport { ProjectStatus } from \"../models/project\";\r\n\r\n// Project state Managment Class\r\ntype Listener<T> = (items: T[]) => void\r\n\r\nclass State <T> {\r\n    protected listeners:  Listener<T>[] = []\r\n\r\n    addListener(listenerFn: Listener<T>){\r\n        this.listeners.push(listenerFn)\r\n    }\r\n}\r\n\r\nexport class ProjectState extends State<Project>{\r\n    private projects: Project[] = [];\r\n    private static instance: ProjectState;\r\n\r\n    private constructor(){\r\n        super()\r\n    }\r\n\r\n    static getInstance(){\r\n        if(this.instance){\r\n            return this.instance;\r\n        }\r\n\r\n        this.instance = new ProjectState();\r\n        return this.instance;\r\n    }\r\n\r\n    addProject(\r\n        title: string, \r\n        description: string, \r\n        numberOfPeople: number\r\n    ){\r\n        const newProject = new Project(\r\n            Math.random().toString(), \r\n            title, \r\n            description, \r\n            numberOfPeople,\r\n            ProjectStatus.Active \r\n        )\r\n        this.projects.push(newProject);\r\n        this.updateListeners();\r\n    }\r\n\r\n    moveProject(projectId: string, newStatus: ProjectStatus){\r\n        const project = this.projects.find(prj => prj.id === projectId);\r\n\r\n        if(\r\n            project &&\r\n            project.status !== newStatus\r\n        ){\r\n            project.status = newStatus;\r\n            this.updateListeners()\r\n        }\r\n    }\r\n\r\n    private updateListeners(){\r\n        for (const listenerFn of this.listeners){\r\n            listenerFn(this.projects.slice())\r\n        }\r\n    }\r\n}\r\n\r\nexport const projectState = ProjectState.getInstance();","// Imports\r\nimport { Component } from \"./base-component\";\r\nimport { Validatable, validate } from \"../util/validation\";\r\nimport { Autobind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\n\r\n// ProjectInput Class\r\nexport class ProjectInput extends Component <HTMLDivElement, HTMLFormElement>{\r\n    titleInputElement: HTMLInputElement;\r\n    descriptionInputElement: HTMLInputElement;\r\n    peopleInputElement: HTMLInputElement;\r\n\r\n    constructor(){\r\n        super('project-input', 'app', true, 'user-input')\r\n\r\n        this.titleInputElement = this.element.querySelector(\r\n            '#title'\r\n        )! as HTMLInputElement;\r\n\r\n        this.descriptionInputElement = this.element.querySelector(\r\n            '#description'\r\n        )! as HTMLInputElement;\r\n\r\n        this.peopleInputElement = this.element.querySelector(\r\n            '#people'\r\n        )! as HTMLInputElement;\r\n\r\n        this.configure();\r\n    }\r\n\r\n    configure(){\r\n        this.element.addEventListener('submit', this.submitHandler)\r\n    }\r\n\r\n    renderContent(): void {\r\n        \r\n    }\r\n\r\n    private gatherUserInput(): [string, string, number] | void{\r\n        const enteredTitle = this.titleInputElement.value\r\n        const enteredDescription = this.descriptionInputElement.value\r\n        const enteredPeople = this.peopleInputElement.value\r\n\r\n        const titleValidatable: Validatable = {\r\n            value: enteredTitle,\r\n            required: true,\r\n            minLength: 5, \r\n            maxLength: 30\r\n        }\r\n\r\n        const descriptionValidatable: Validatable = {\r\n            value: enteredDescription,\r\n            required: true,\r\n            minLength: 15\r\n        }\r\n\r\n        const peopleValidatable: Validatable = {\r\n            value: +enteredPeople,\r\n            required: true,\r\n            min: 1,\r\n            max: 10\r\n\r\n        }\r\n        \r\n        if(\r\n            !validate(titleValidatable) ||\r\n            !validate(descriptionValidatable) ||\r\n            !validate(peopleValidatable)\r\n        ) {\r\n            alert(\"Invalid input, please try again.\")\r\n            return\r\n        } else {\r\n            return [enteredTitle, enteredDescription, +enteredPeople]\r\n        }\r\n    }\r\n    \r\n    private clearInputs(){\r\n        this.titleInputElement.value = '';\r\n        this.descriptionInputElement.value = '';\r\n        this.peopleInputElement.value = ''\r\n    }\r\n\r\n    @Autobind\r\n    private submitHandler(event: Event){\r\n        event.preventDefault();\r\n        const userInput = this.gatherUserInput();\r\n\r\n        if (Array.isArray(userInput)){\r\n            const [title, description, people] = userInput;\r\n            projectState.addProject(title, description, people)\r\n            this.clearInputs()\r\n        }\r\n\r\n    }\r\n}","// Imports\r\nimport { Project } from \"../models/project\";\r\nimport { Draggable } from \"../models/drag-drop\";\r\nimport { Autobind } from \"../decorators/autobind\";\r\nimport { Component } from \"./base-component\";\r\n\r\n\r\n// Project Item class\r\nexport class ProjectItem extends Component <HTMLUListElement, HTMLLIElement>\r\n    implements Draggable {\r\n\r\n    private project: Project;\r\n\r\n    get persons(){\r\n        if(this.project.people === 1){\r\n            return '1 person '\r\n        } else {\r\n            return `${this.project.people} persons `\r\n        }\r\n    }\r\n\r\n    constructor(hostId: string, project: Project){\r\n        super('single-project', hostId, false, project.id)\r\n        this.project = project\r\n\r\n        this.configure();\r\n        this.renderContent();\r\n    }\r\n\r\n    @Autobind\r\n    dragStartHandler(event: DragEvent): void {\r\n        event.dataTransfer!.setData('text/plain', this.project.id)\r\n        event.dataTransfer!.effectAllowed = 'move'\r\n    }\r\n\r\n    @Autobind\r\n    dragEndHandler(_: DragEvent): void {\r\n        console.log('dragEnd!!')\r\n    }\r\n\r\n    configure(): void {\r\n        this.element.addEventListener('dragstart', this.dragStartHandler)\r\n        this.element.addEventListener('dragend', this.dragEndHandler)\r\n    }\r\n\r\n    renderContent(){\r\n        this.element.querySelector('h2')!.textContent = this.project.title;\r\n        this.element.querySelector('h3')!.textContent = this.persons + 'assigned';\r\n        this.element.querySelector('p')!.textContent = this.project.description;\r\n    }\r\n}\r\n","// Imports\r\nimport { Project, ProjectStatus } from \"../models/project\";\r\nimport { DragTarget } from \"../models/drag-drop\";\r\nimport { Autobind } from \"../decorators/autobind\";\r\nimport { Component } from \"./base-component\";\r\nimport { projectState } from \"../state/project-state\";\r\nimport { ProjectItem } from \"./project-item\";\r\n\r\n// Project List class\r\nexport class ProjectList extends Component <HTMLDivElement, HTMLElement>\r\nimplements DragTarget{\r\n    assignedProjects: Project[];\r\n\r\n    constructor(private type:'active' | 'finished'){\r\n        super('project-list', 'app', false,`${type}-projects`)\r\n        this.assignedProjects = []\r\n\r\n        this.element.id = `${this.type}-projects`;\r\n\r\n        this.configure();\r\n        this.renderContent();\r\n    }\r\n    \r\n    @Autobind\r\n    dragOverhandler(event: DragEvent): void {\r\n        if (\r\n            event.dataTransfer && \r\n            event.dataTransfer.types[0] === 'text/plain'\r\n        ){\r\n            event.preventDefault();\r\n            const listEl = this.element.querySelector('ul')!;\r\n            listEl.classList.add('droppable')\r\n        }\r\n    }\r\n    \r\n    @Autobind\r\n    dropHandler(event: DragEvent): void {\r\n        const prjId = event.dataTransfer!.getData('text/plain')\r\n        projectState.moveProject(\r\n            prjId, \r\n            this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\r\n        )\r\n    }\r\n\r\n    @Autobind\r\n    dragLeaveHandler(event: DragEvent): void {\r\n        const listEl = this.element.querySelector('ul')!;\r\n        listEl.classList.remove('droppable')\r\n    }\r\n\r\n    configure(): void {\r\n        this.element.addEventListener('dragover', this.dragOverhandler);\r\n        this.element.addEventListener('dragleave', this.dragLeaveHandler);\r\n        this.element.addEventListener('drop', this.dropHandler);\r\n\r\n        projectState.addListener((projects: Project[]) => {\r\n            const relevantProjects = projects.filter(\r\n                prj => {\r\n                    if(this.type === 'active'){\r\n                        return prj.status === ProjectStatus.Active\r\n                    }\r\n                    return prj.status === ProjectStatus.Finished\r\n                }\r\n                )\r\n            this.assignedProjects = relevantProjects;\r\n            this.renderProjects();\r\n        });\r\n    }\r\n    \r\n    renderContent(){\r\n        const listId = `${this.type}-projects-list`;\r\n        this.element.querySelector(\"ul\")!.id = listId;\r\n        this.element.querySelector('h2')!.textContent = this.type.toUpperCase() + ' PROJECTS'\r\n    }\r\n\r\n    private renderProjects(){\r\n        const listEL = document.getElementById(`${this.type}-projects-list`)! as HTMLUListElement\r\n\r\n        listEL.innerHTML = ''\r\n        for (const prjItem of this.assignedProjects){\r\n            new ProjectItem(this.element.querySelector('ul')!.id, prjItem);\r\n        }\r\n    }\r\n}","// imports\r\nimport { ProjectInput } from \"./components/project-input\";\r\nimport { ProjectList } from \"./components/project-list\";\r\n\r\nconst prjInpunt = new ProjectInput();\r\nconst activeProjectList = new ProjectList('active');\r\nconst finishedProjectList = new ProjectList('finished');\r\n\r\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","Autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","static","instance","addProject","numberOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","ProjectItem","persons","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverhandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}