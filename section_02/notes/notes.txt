types **************************

CORE TYPES
Number : includes the integers and floats. (1, 5.3, -10)
string : text. Allows to use template literals.
boolean : true or false. It doesn't includes the 0 and 1.


type inference means that TS does it's best to understand wich type you have in a certain var or const.


##########

Array - Any Js array. Type can be flexible or strict (regarding the element types).

Tuple - Added by TS: fixed-length array. 

When the tuple finally gets converted to array when compiled to JS, JS will treat it as a normal array. But during TS development we'll get errors if we get to make one.

In TS a push is acceptable. So we'll won't get any errors durign development. Gotta stay alert to this.

But trying to assign a new value by the following syntax we'll get an error.
    person.role = [0, 'aaa', 'bbb'] 
And that's because during role first assignment we stated that it would have only 2 itens. So we can conclude that length is enforced if we assign a tuple


########## Lesson 20 - Working with enums

Enum Type

It does exists in other programing languages, but in vanilla JS don't.

Enum sample -> enum{NEW, OLD}

Added by TS: automatically enumerated global constant identifiers.

Here goes how we assign an enum:

    enum Role {
        ADMIN, READ_ONLY, AUTHOR
    };

In enums we get index as well as we get in arrays. And to access it's values we should go with the following syntax:

    Role.ADMIN

This way we tell TS exactly what we want to get inside the Enum

We can set our own values as index if we want or need as well.
    
    enum Role {
        ADMIN = 'Author', READ_ONLY = 100, AUTHOR = 777
    };

########## Lesson 21 - The "any" type

The any type is the most flexible type we got in TS. It basically means that we can store any kinf of value in there.

This type is a disadvantage and it's great if we avoid using it. It gives away all the advantages that the TS gives you.

########## Lesson 23 - Literal types

Literal types are the types wich are based on your core types, but then have a specific version of the type.

########## lesson 24 - Type Aliases / Custom Types

We can use it to store union types for example, making our code easier to write an read. Take a look at the following example:

    type Combinable = number | string; 

    function combine3 (
        input1: Combinable,
        input2: Combinable,

In the piece of code above, we would have to specify the union type at every argument. But using a custom type that stored the type we're willing to use made our task easier.

Type aliases can be used to "create" your own types. You're not limited to storing union types though - you can also provide an alias to a (possibly complex) object type.

For example:

    type User = { name: string; age: number };
    const u1: User = { name: 'Max', age: 30 }; // this works!

This allows you to avoid unnecessary repetition and manage types centrally.

For example, you can simplify this code:

    function greet(user: { name: string; age: number }) {
    console.log('Hi, I am ' + user.name);
    }
    
    function isOlder(user: { name: string; age: number }, checkAge: number) {
    return checkAge > user.age;
    }
To:

    type User = { name: string; age: number };
    
    function greet(user: User) {
    console.log('Hi, I am ' + user.name);
    }
    
    function isOlder(user: User, checkAge: number) {
    return checkAge > user.age;
    }

########## lesson 26 - function return types & "void"

in a simple addition function we'll see that TS infers that the arguments are number types. But untill now we never got to see that the TS also types what the function returns to us. So, comming back to the addition function, it'll also return type number.
If we hover the mouse over the function it will show us the follwing:

    function add(n1: number, n2: number): number

After the Parentheses we got the return type.